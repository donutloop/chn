//Code generated by xproto [v0.1.0], DO NOT EDIT.
//source: [chn.proto]
//Package [chn] is a generated stub package.
//This code was generated with github.com/donutloop/xservice [v0.1.0]
//It is generated from these files:
//	 [chn.proto]
//package [chn]

package handler

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/donutloop/xservice/framework/errors"
	"github.com/donutloop/xservice/framework/hooks"
	"github.com/donutloop/xservice/framework/server"
	"github.com/donutloop/xservice/framework/transport"
	"github.com/donutloop/xservice/framework/xcontext"
	"github.com/donutloop/xservice/framework/xhttp"
)

// //[StoryServicePathPrefix StoryService] is used for all URL paths on a %!s(MISSING) server.
//Requests are always: POST [StoryServicePathPrefix] /method
//It can be used in an HTTP mux to route requests
const StoryServicePathPrefix string = "/xservice/service.chn.StoryService/"

// 291 bytes of a gzipped FileDescriptorProto
var xserviceFileDescriptor0 = []byte{0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x31, 0x4f, 0xfb, 0x30, 0x10, 0xc5, 0x95, 0xb8, 0x69, 0x9b, 0xeb, 0x5f, 0x7f, 0xa1, 0x13, 0x20, 0xab, 0x03, 0x8a, 0x3a, 0x65, 0x40, 0x19, 0xca, 0x02, 0x12, 0x13, 0x13, 0x13, 0x43, 0xba, 0xb1, 0xa5, 0xf6, 0x89, 0x5a, 0x24, 0x76, 0x6a, 0x1b, 0xa4, 0x7c, 0x4a, 0xbe, 0x12, 0x8a, 0xdd, 0xa2, 0x0c, 0xdd, 0xee, 0xfd, 0xee, 0x9d, 0xde, 0x9d, 0x0d, 0xb9, 0x38, 0xe8, 0xaa, 0xb7, 0xc6, 0x1b, 0x5c, 0x39, 0xb2, 0xdf, 0x4a, 0x50, 0x25, 0x0e, 0x7a, 0xf3, 0x0c, 0xcb, 0x9d, 0x37, 0x76, 0xa8, 0xe9, 0x88, 0x6b, 0x58, 0x8a, 0xc6, 0xd3, 0x87, 0xb1, 0x03, 0x4f, 0x8a, 0xa4, 0xcc, 0xeb, 0x3f, 0x8d, 0xd7, 0x90, 0xb5, 0xaa, 0x53, 0x9e, 0xa7, 0x45, 0x52, 0xb2, 0x3a, 0x8a, 0xcd, 0x13, 0xe4, 0xa7, 0x69, 0xd7, 0xe3, 0x3d, 0x2c, 0x9c, 0x37, 0x56, 0x91, 0xe3, 0x49, 0xc1, 0xca, 0xd5, 0x16, 0xab, 0x49, 0x52, 0x15, 0x8d, 0x67, 0xcb, 0xe6, 0x27, 0x81, 0x2c, 0x20, 0xfc, 0x0f, 0xe9, 0xfe, 0x1c, 0x98, 0xee, 0x07, 0x2c, 0x60, 0x25, 0xc9, 0x09, 0xd2, 0xb2, 0xd1, 0xde, 0x9d, 0x02, 0xa7, 0x68, 0x9c, 0x50, 0x92, 0xb3, 0xd0, 0x48, 0x95, 0x44, 0x84, 0xd9, 0xa7, 0x92, 0x8e, 0xcf, 0x0a, 0x56, 0xb2, 0x3a, 0xd4, 0xe3, 0xc2, 0x4e, 0x18, 0x4b, 0x3c, 0x8b, 0x0b, 0x07, 0x31, 0x3a, 0xfd, 0xd0, 0x13, 0x9f, 0x87, 0xb4, 0x50, 0x8f, 0x4e, 0xaf, 0x7c, 0x4b, 0x7c, 0x11, 0x60, 0x14, 0x78, 0x05, 0xec, 0xcb, 0xb6, 0x7c, 0x19, 0xd8, 0x58, 0xe2, 0x1d, 0x80, 0x34, 0x5d, 0xa3, 0xf4, 0x5b, 0xd3, 0x11, 0xcf, 0x43, 0x63, 0x42, 0xb6, 0xaf, 0xf0, 0x2f, 0x1c, 0xb4, 0x8b, 0x47, 0xe3, 0x23, 0x2c, 0x76, 0xf1, 0x58, 0xbc, 0xb9, 0xf0, 0x12, 0x74, 0x5c, 0xdf, 0x5e, 0xc2, 0xae, 0x7f, 0xc9, 0xde, 0x99, 0x38, 0xe8, 0xfd, 0x3c, 0xfc, 0xd7, 0xc3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x6a, 0x3f, 0x29, 0xbc, 0x01, 0x00, 0x00}

type StoryService interface {
	Stories(ctx context.Context, req *StoryReq) (*StoryResp, error)
}

// storyServiceJSONClient wraps an http.client and sends JSON objects
type storyServiceJSONClient struct {
	client transport.HTTPClient
	urls   [1]string
}

// Stories sends an StoryReq JSON object to the server
func (c *storyServiceJSONClient) Stories(ctx context.Context, in *StoryReq) (*StoryResp, error) {
	ctx = xcontext.WithPackageName(ctx, "service.chn")
	ctx = xcontext.WithServiceName(ctx, "StoryService")
	ctx = xcontext.WithMethodName(ctx, "Stories")
	out := new(StoryResp)
	err := transport.DoJSONRequest(ctx, c.client, c.urls[0], in, out)
	return out, err
}

// storyServiceProtobufferClient wraps an http.client and sends Protobuffer objects
type storyServiceProtobufferClient struct {
	client transport.HTTPClient
	urls   [1]string
}

// Stories sends an StoryReq Protobuffer object to the server
func (c *storyServiceProtobufferClient) Stories(ctx context.Context, in *StoryReq) (*StoryResp, error) {
	ctx = xcontext.WithPackageName(ctx, "service.chn")
	ctx = xcontext.WithServiceName(ctx, "StoryService")
	ctx = xcontext.WithMethodName(ctx, "Stories")
	out := new(StoryResp)
	err := transport.DoProtobufferRequest(ctx, c.client, c.urls[0], in, out)
	return out, err
}

// storyServiceServer wraps an endpoint and implements http.Handler.
type storyServiceServer struct {
	StoryService
	hooks        *hooks.ServerHooks
	logErrorFunc transport.LogErrorFunc
}

func (s *storyServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	transport.WriteErrorAndTriggerHooks(ctx, resp, err, s.hooks)
}

// ServeHTTP implements http.Handler.
func (s *storyServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = xcontext.WithPackageName(ctx, "service.chn")
	ctx = xcontext.WithServiceName(ctx, "StoryService")
	ctx = xcontext.WithResponseWriter(ctx, resp)
	var err error
	ctx, err = transport.CallRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if req.Method != http.MethodPost {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		terr := errors.BadRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, terr)
		return
	}

	switch req.URL.Path {
	case "/xservice/service.chn.StoryService/Stories":
		s.serveStories(ctx, resp, req)
		return

	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		terr := errors.BadRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, terr)
		return
	}

}

// serveStories is used to set an decoder and encoder for a given content type
func (s *storyServiceServer) serveStories(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get(xhttp.ContentTypeHeader)
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	modifiedHeader := strings.ToLower(header[:i])
	modifiedHeader = strings.TrimSpace(modifiedHeader)
	if modifiedHeader == xhttp.ApplicationJson {
		s.serveStoriesContent(ctx, resp, req, transport.DecodeJSONRequest, transport.EncodeJSONResponse)
		return
	} else if modifiedHeader == xhttp.ApplicationProtobuf {
		s.serveStoriesContent(ctx, resp, req, transport.DecodePROTORequest, transport.EncodePROTOResponse)
		return
	} else {
		msg := fmt.Sprintf("unexpected Content-Type: %q", header)
		terr := errors.BadRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, terr)
	}
}

// serveStoriesContent sends object to requester
func (s *storyServiceServer) serveStoriesContent(ctx context.Context, resp http.ResponseWriter, req *http.Request, decodeRequest transport.DecodeRequestFunc, encodeResponse transport.EncodeResponseFunc) {
	var err error
	ctx = xcontext.WithMethodName(ctx, "Stories")
	ctx, err = transport.CallRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	defer transport.Closebody(req.Body, s.logErrorFunc)

	reqContent := new(StoryReq)
	if err := decodeRequest(ctx, req, reqContent); err != nil {
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, err)
		return
	}
	endpointWrapper := func() (*StoryResp, error) {
		deferWrapper := func() {
			if r := recover(); r != nil {
				terr := errors.InternalError("Internal service panic")
				s.writeError(ctx, resp, terr)
				panic(r)
			}
		}
		defer deferWrapper()

		return s.Stories(ctx, reqContent)

	}
	respContent, err := endpointWrapper()
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		terr := errors.InternalError("received a nil * StoryResp, and nil error while calling Stories. nil responses are not supported")
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, terr)
		return
	}
	ctx = transport.CallResponsePrepared(ctx, s.hooks)
	if err := encodeResponse(ctx, resp, respContent); err != nil {
		s.logErrorFunc("%v", err)
		s.writeError(ctx, resp, err)
		return
	}
	transport.CallResponseSent(ctx, s.hooks)
}

// ServiceDescriptor describes an service.
func (s *storyServiceServer) ServiceDescriptor() ([]uint8, int) {
	return xserviceFileDescriptor0, 0
}

// ProtocGenXServiceVersion returns which xservice version was used to generate that service
func (s *storyServiceServer) ProtocGenXServiceVersion() string {
	return "v0.1.0"
}

// NewStoryServiceJSONClient constructs a new client, which wraps the http.client and implements StoryService
func NewStoryServiceJSONClient(addr string, client transport.HTTPClient) StoryService {
	URLBase := transport.UrlBase(addr)
	prefix := URLBase + StoryServicePathPrefix
	urls := [1]string{
		prefix + "Stories",
	}
	httpClient, ok := client.(*http.Client)
	if ok == true {
		httpClient = transport.WithoutRedirects(httpClient)
		return &storyServiceJSONClient{
			client: httpClient,
			urls:   urls,
		}
	}
	return &storyServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

// NewStoryServiceProtobufferClient constructs a new client, which wraps the http.client and implements StoryService
func NewStoryServiceProtobufferClient(addr string, client transport.HTTPClient) StoryService {
	URLBase := transport.UrlBase(addr)
	prefix := URLBase + StoryServicePathPrefix
	urls := [1]string{
		prefix + "Stories",
	}
	httpClient, ok := client.(*http.Client)
	if ok == true {
		httpClient = transport.WithoutRedirects(httpClient)
		return &storyServiceProtobufferClient{
			client: httpClient,
			urls:   urls,
		}
	}
	return &storyServiceProtobufferClient{
		client: client,
		urls:   urls,
	}
}

// NewStoryServiceServer constructs a new server, and implements StoryService
func NewStoryServiceServer(svc StoryService, hooks *hooks.ServerHooks, errorFunc ...transport.LogErrorFunc) server.Server {
	server := &storyServiceServer{
		StoryService: svc,
		hooks:        hooks,
	}
	if len(errorFunc) == 1 {
		server.logErrorFunc = errorFunc[0]
	} else {
		server.logErrorFunc = log.Printf
	}
	return server
}
